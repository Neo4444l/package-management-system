╔═══════════════════════════════════════════════════════════════╗
║                                                               ║
║           🚀 本项目 Git 使用指南                              ║
║          （专门针对你的包裹管理系统）                         ║
║                                                               ║
╚═══════════════════════════════════════════════════════════════╝

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📍 第一步：初始化 Git（只需做一次）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

如果你还没有初始化 Git，按以下步骤操作：

1. 打开 CMD（不要用 PowerShell）

2. 进入项目文件夹：
   cd C:\Users\31424\Desktop\新建文件夹

3. 初始化 Git：
   git init

4. 配置你的信息（替换成你自己的）：
   git config --global user.name "你的名字"
   git config --global user.email "你的邮箱@example.com"

5. 添加远程仓库（在 GitHub 创建仓库后会给你这个地址）：
   git remote add origin https://github.com/你的用户名/你的仓库名.git

✅ 完成！现在可以开始使用 Git 了！

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📝 每天工作流程（照着做就行）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

【早上开始工作】
--------------
1. 打开 CMD
2. cd C:\Users\31424\Desktop\新建文件夹
3. git pull
   
   看到 "Already up to date" 就说明没有新代码
   看到下载了一些文件，说明有更新

【修改代码...】
-------------
你可以：
- 修改任何文件
- 添加新文件
- 删除文件

Git 会自动追踪这些变化

【想看看改了什么】
----------------
随时运行：git status

你会看到：
- 红色文件 = 还没保存到 Git
- 绿色文件 = 已经保存，等待提交

【完成一个功能 / 下班前】
------------------------
1. 保存所有修改：
   git add .

2. 提交并写说明（说明改了什么）：
   git commit -m "今天完成的工作描述"
   
   例如：
   git commit -m "完成数据云端同步功能"
   git commit -m "修复上架页面的bug"
   git commit -m "添加数据迁移工具"

3. 上传到 GitHub：
   git push

4. 看到 "Everything up-to-date" 或者上传成功信息，就完成了！

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🎯 完整示例：从修改到上传
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

假设你刚才修改了几个文件，现在想上传：

C:\Users\31424\Desktop\新建文件夹> git status
→ 查看：会显示哪些文件被修改了

C:\Users\31424\Desktop\新建文件夹> git add .
→ 保存所有修改

C:\Users\31424\Desktop\新建文件夹> git commit -m "修复了数据同步的bug"
→ 提交修改，写好说明

C:\Users\31424\Desktop\新建文件夹> git push
→ 上传到 GitHub

完成！✅

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📊 实际操作演示
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

场景：你刚完成了"数据云端同步"功能，想提交代码

第1步：查看状态
--------------
C:\Users\31424\Desktop\新建文件夹> git status

On branch main
Changes not staged for commit:
  modified:   src/App.jsx
  modified:   src/pages/ShelvingInput.jsx
  modified:   src/pages/LocationManagement.jsx
  modified:   src/pages/CenterReturnManagement.jsx
  modified:   src/pages/UnshelvingPage.jsx

Untracked files:
  src/services/dataService.js
  src/components/DataMigration.jsx

说明：红色的文件都是被修改或新建的文件

第2步：保存所有修改
-----------------
C:\Users\31424\Desktop\新建文件夹> git add .

（这个命令没有输出，正常！）

第3步：再次查看状态（可选）
------------------------
C:\Users\31424\Desktop\新建文件夹> git status

On branch main
Changes to be committed:
  modified:   src/App.jsx
  modified:   src/pages/ShelvingInput.jsx
  ...

说明：现在文件变成绿色了，表示已经保存

第4步：提交并写说明
-----------------
C:\Users\31424\Desktop\新建文件夹> git commit -m "完成数据云端同步功能"

[main a1b2c3d] 完成数据云端同步功能
 7 files changed, 456 insertions(+), 123 deletions(-)
 create mode 100644 src/services/dataService.js
 create mode 100644 src/components/DataMigration.jsx

说明：显示修改了多少文件，成功了！

第5步：上传到 GitHub
-------------------
C:\Users\31424\Desktop\新建文件夹> git push

Enumerating objects: 15, done.
Counting objects: 100% (15/15), done.
Delta compression using up to 8 threads
Compressing objects: 100% (8/8), done.
Writing objects: 100% (9/9), 2.45 KiB | 2.45 MiB/s, done.
To https://github.com/你的用户名/你的仓库.git
   d4e5f6g..a1b2c3d  main -> main

说明：上传成功！✅

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
⚠️ 常见问题解决
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

问题1：git push 失败，提示 "Updates were rejected"
------------------------------------------------

看到这个：
! [rejected]        main -> main (fetch first)
error: failed to push some refs

原因：GitHub 上有新代码，你的本地代码不是最新的

解决方法：
1. git pull          （先下载最新代码）
2. git push          （再上传）

如果 git pull 提示有冲突，看下面"问题2"


问题2：git pull 后提示有冲突
---------------------------

看到这个：
CONFLICT (content): Merge conflict in src/App.jsx
Automatic merge failed; fix conflicts and then commit

原因：你和别人同时修改了同一个文件的同一个地方

解决方法：
1. 打开有冲突的文件（例如 src/App.jsx）
2. 找到这样的标记：
   <<<<<<< HEAD
   你的代码
   =======
   别人的代码
   >>>>>>> origin/main

3. 手动决定保留哪部分代码，删除这些标记

4. 保存文件后运行：
   git add .
   git commit -m "解决冲突"
   git push


问题3：不小心改错了，想恢复
-------------------------

如果还没有 git add：
git restore 文件名
例如：git restore src/App.jsx

如果已经 git add 但还没 git commit：
git restore --staged 文件名
git restore 文件名

如果已经 git commit 但还没 git push：
git reset --soft HEAD~1
（这会撤销提交，但保留你的修改）


问题4：想删除某个文件并提交
-------------------------

git rm 文件名
git commit -m "删除了某个文件"
git push

或者：
直接删除文件（用文件管理器）
git add .
git commit -m "删除了某个文件"
git push


问题5：提示 "Please tell me who you are"
---------------------------------------

原因：没有配置 Git 用户信息

解决：
git config --global user.name "你的名字"
git config --global user.email "你的邮箱@example.com"

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🎓 特殊情况处理
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

场景：忘记 git pull 就修改了代码
-------------------------------

情况：你早上忘记 git pull，直接开始改代码，现在想提交

步骤：
1. 先保存你的修改：
   git add .
   git commit -m "我的修改"

2. 再拉取代码：
   git pull

3. 如果有冲突，解决冲突

4. 最后上传：
   git push


场景：想看看历史记录
------------------

查看简化版历史：
git log --oneline

你会看到：
a1b2c3d (HEAD -> main) 完成数据云端同步功能
d4e5f6g 添加用户登录系统
g7h8i9j 初始提交

查看详细历史：
git log

（按 q 退出查看）


场景：想撤销上次提交
------------------

如果还没 push：
git reset --soft HEAD~1
（撤销提交，但保留修改，可以重新 commit）

如果已经 push：
不建议撤销！如果真的要撤销：
git revert HEAD
git push
（这会创建一个新的提交来撤销上次的修改）

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🌟 提交说明的建议
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

好的说明示例：
-------------
✅ "添加数据云端同步功能"
✅ "修复上架页面无法显示包裹的bug"
✅ "优化查询性能，减少加载时间"
✅ "更新用户登录界面样式"
✅ "删除不再使用的测试代码"

不好的说明示例：
--------------
❌ "修改"
❌ "update"
❌ "fix bug"（没说清楚修复了什么bug）
❌ "aaa"
❌ "test"

建议格式：
--------
[动词] + [具体内容]

常用动词：
- 添加：添加XXX功能
- 修复：修复XXX问题
- 优化：优化XXX性能
- 更新：更新XXX内容
- 删除：删除XXX代码
- 重构：重构XXX模块
- 完成：完成XXX功能

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📋 不需要上传的文件（.gitignore）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

你的项目已经有 .gitignore 文件了，里面列出了不需要上传的文件：

node_modules/        → npm 安装的包（太大，不用上传）
dist/                → 编译后的文件（可以重新生成）
.env                 → 环境变量（包含密钥，不能上传！）
.env.local           → 本地环境变量
.DS_Store            → Mac 系统文件

如果需要添加其他不上传的文件，编辑 .gitignore 文件即可。

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🔄 与团队协作的流程
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

如果有多人一起开发：

【每天早上第一件事】
git pull

【开始工作前】
git pull              （再次确认是最新代码）

【完成一个小功能后】
git add .
git commit -m "完成XXX功能"

【准备下班前】
git pull              （看看别人有没有提交新代码）
git push              （上传你的代码）

【关键原则】
- 尽早 pull，尽早 push
- 提交说明要清楚
- 有冲突立即解决，不要拖延

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🎯 快速参考（复制粘贴用）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

查看状态：
git status

保存所有修改：
git add .

提交修改：
git commit -m "说明"

上传到 GitHub：
git push

下载最新代码：
git pull

查看历史：
git log --oneline

撤销修改（未提交）：
git restore 文件名

完整提交流程（复制这个！）：
git add .
git commit -m "说明你改了什么"
git push

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
💡 小贴士
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1. 养成习惯：
   - 早上：git pull
   - 完成功能：提交
   - 下班前：git push

2. 经常 git status
   随时知道哪些文件被修改了

3. commit 说明要清楚
   几个月后你会感谢自己

4. 小步提交
   完成一个小功能就 commit，不要积累太多

5. push 之前先 pull
   避免冲突

6. 重要：.env 文件不要上传！
   包含密钥的文件要加到 .gitignore

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🆘 遇到问题怎么办？
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1. 先看本文档的"常见问题解决"部分

2. 看详细的错误信息
   Git 的错误信息通常会告诉你怎么做

3. 复制错误信息到 Google 搜索
   大部分问题都有人遇到过

4. 实在不行，告诉我错误信息
   我会帮你解决！

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📌 保存这个文件！每次提交代码前看一眼！

🎉 记住最核心的三条命令：
   1. git add .
   2. git commit -m "说明"
   3. git push

就这么简单！加油！💪

