╔═══════════════════════════════════════════════════════════════╗
║                                                               ║
║          ⚡ 正确的权限管理方案 - 实施指南                     ║
║                                                               ║
╚═══════════════════════════════════════════════════════════════╝

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🎯 权限设计
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

👤 普通用户（user）
==================
✅ 可以做：
  - 查看所有包裹（数据互通）
  - 查看所有库位（数据互通）
  - 上架包裹（添加包裹）
  - 下架包裹（更新包裹状态）
  - 修改包裹状态
  - 添加库位

❌ 不能做：
  - 删除包裹 ⛔
  - 删除库位 ⛔
  - 修改其他用户的角色 ⛔

👑 管理员（admin）
==================
✅ 可以做：
  - 所有普通用户的权限
  - 删除包裹 ⭐
  - 删除库位 ⭐
  - 管理用户角色 ⭐
  - 查看操作日志 ⭐

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🚀 立即实施（10分钟）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

第1步：登录 Supabase
====================
1. 打开 https://supabase.com
2. 登录你的账号
3. 选择你的项目

第2步：运行权限配置脚本
======================
1. 点击左侧 "SQL Editor"
2. 点击 "+ New query"
3. 打开文件：🔐 正确的权限管理方案.sql
4. 复制全部内容
5. 粘贴到 SQL 编辑器
6. 点击 "Run"
7. 等待执行完成（约10秒）

第3步：设置第一个管理员
======================
在 Supabase SQL Editor 中运行：

-- 方法1：按邮箱设置（推荐）
UPDATE profiles 
SET role = 'admin' 
WHERE email = 'your_email@example.com';  -- 替换成你的邮箱

-- 方法2：将第一个注册的用户设为管理员
UPDATE profiles 
SET role = 'admin' 
WHERE id = (
  SELECT id FROM profiles 
  ORDER BY created_at ASC 
  LIMIT 1
);

第4步：验证配置
==============
运行以下查询验证：

-- 查看所有用户及其角色
SELECT email, role, created_at 
FROM profiles 
ORDER BY created_at;

-- 查看策略配置
SELECT tablename, policyname, cmd 
FROM pg_policies 
WHERE tablename IN ('profiles', 'packages', 'locations')
ORDER BY tablename, policyname;

第5步：刷新前端测试
==================
1. 回到前端页面
2. 按 Ctrl+Shift+R 强制刷新
3. 重新登录
4. 开始测试（见下方测试清单）

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
✅ 测试清单
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

用普通用户账户测试：
====================

□ 测试1：查看数据（应该成功）
   - 进入系统
   - ✅ 应该能看到所有包裹
   - ✅ 应该能看到所有库位

□ 测试2：上架包裹（应该成功）
   - 进入"包裹上架"
   - 添加一个包裹（例如：USER_TEST_001）
   - ✅ 应该显示"已成功上架到云端"

□ 测试3：下架包裹（应该成功）
   - 在"中心退回管理"中设置包裹为"待下架"
   - 进入"下架管理"
   - 扫描该包裹
   - ✅ 应该能成功下架

□ 测试4：尝试删除包裹（应该失败）
   - 在包裹列表中点击删除按钮
   - ❌ 应该提示"删除失败：权限不足"或类似错误
   - 这是正常的！普通用户不能删除

□ 测试5：尝试删除库位（应该失败）
   - 在库位管理中点击删除按钮
   - ❌ 应该提示"删除失败：权限不足"
   - 这是正常的！普通用户不能删除

用管理员账户测试：
==================

□ 测试6：所有普通操作（应该成功）
   - 上架、下架、查看
   - ✅ 所有操作都应该成功

□ 测试7：删除包裹（应该成功）
   - 在包裹列表中点击删除
   - ✅ 应该显示"已从云端删除"

□ 测试8：删除库位（应该成功）
   - 在库位管理中点击删除
   - ✅ 应该显示"库位已从云端删除"

□ 测试9：管理用户（应该能看到）
   - 点击"用户管理"按钮
   - ✅ 应该能看到所有用户
   - ✅ 应该能修改用户角色

数据互通测试：
=============

□ 测试10：多用户数据互通
   - 用户A添加包裹
   - 用户B登录
   - ✅ 用户B应该能看到用户A添加的包裹

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🔧 如何解决 infinite recursion 问题
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

核心技术：SECURITY DEFINER 函数
===============================

❌ 旧方案（有问题）：
-------------------
直接在策略中查询 profiles 表：

CREATE POLICY "管理员可以删除"
  ON packages FOR DELETE
  USING (
    EXISTS (
      SELECT 1 FROM profiles          ← 查询 profiles
      WHERE id = auth.uid()
      AND role = 'admin'
    )
  );

问题：
当查询 packages 时 → 检查策略 → 需要查询 profiles
当查询 profiles 时 → 检查策略 → 又需要查询 profiles
→ 无限循环！❌


✅ 新方案（已修复）：
-------------------
使用 SECURITY DEFINER 函数：

-- 第1步：创建函数（不受 RLS 限制）
CREATE FUNCTION is_admin()
RETURNS BOOLEAN AS $$
BEGIN
  RETURN (
    SELECT role FROM profiles 
    WHERE id = auth.uid() 
    LIMIT 1
  ) = 'admin';
END;
$$ LANGUAGE plpgsql SECURITY DEFINER STABLE;

-- 第2步：在策略中使用函数
CREATE POLICY "管理员可以删除"
  ON packages FOR DELETE
  USING (is_admin());           ← 调用函数，不直接查询

优点：
✅ 函数执行时不受 RLS 限制
✅ 避免循环引用
✅ 代码更清晰
✅ 性能更好（STABLE 缓存结果）

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🎓 技术细节
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

创建的辅助函数：
===============

1. get_user_role()
   - 返回当前用户的角色
   - 如果找不到，返回 'user'
   - 使用 SECURITY DEFINER 避免 RLS

2. is_admin()
   - 检查是否为管理员
   - 返回 true/false
   - 简化策略代码

3. is_manager_or_admin()
   - 检查是否为管理员或经理
   - 为未来扩展预留

权限策略设计：
=============

profiles 表：
-----------
- SELECT: 所有登录用户可查看（数据互通）
- UPDATE: 自己可改基本信息，管理员可改所有

packages 表：
-----------
- SELECT: 所有用户可查看（数据互通）
- INSERT: 所有用户可添加（上架）
- UPDATE: 所有用户可更新（下架、改状态）
- DELETE: 只有管理员可删除 ⭐

locations 表：
------------
- SELECT: 所有用户可查看（数据互通）
- INSERT: 所有用户可添加
- DELETE: 只有管理员可删除 ⭐

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
⚠️ 常见问题
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

问题1：普通用户点删除没反应
--------------------------
这是正常的！普通用户本来就不能删除。

建议改进：
在前端代码中隐藏删除按钮（普通用户看不到）
或者显示一个"权限不足"的友好提示

问题2：管理员也删除失败
----------------------
可能原因：
- 还没有设置管理员角色
- 策略没有生效

解决：
1. 检查当前用户角色：
   SELECT get_user_role() as my_role;

2. 如果不是 admin，设置为管理员：
   UPDATE profiles 
   SET role = 'admin' 
   WHERE email = 'your_email@example.com';

3. 刷新页面重新登录

问题3：仍然提示 infinite recursion
---------------------------------
可能原因：旧的策略还存在

解决：
手动删除所有旧策略：

DROP POLICY IF EXISTS "激活用户可以查看包裹" ON packages;
DROP POLICY IF EXISTS "激活用户可以添加包裹" ON packages;
DROP POLICY IF EXISTS "激活用户可以更新包裹" ON packages;
-- ... 等等

然后重新运行：🔐 正确的权限管理方案.sql

问题4：数据还是不互通
--------------------
检查：
1. 确认所有表的 SELECT 策略是：
   auth.role() = 'authenticated'
   （而不是 auth.uid() = user_id）

2. 查看当前策略：
   SELECT * FROM pg_policies 
   WHERE tablename = 'packages';

3. 如果策略不对，重新运行配置脚本

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🎨 前端优化建议（可选）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

建议1：根据角色显示/隐藏删除按钮
===============================

在 ShelvingInput.jsx 中：

{userRole === 'admin' && (
  <button 
    className="delete-button"
    onClick={() => handleDelete(pkg.id)}
  >
    🗑️ 删除
  </button>
)}

建议2：删除失败时友好提示
========================

const handleDelete = async (id) => {
  try {
    await deletePackage(id)
    showNotification('删除成功', 'success')
  } catch (error) {
    if (error.message.includes('permission')) {
      showNotification('权限不足：只有管理员可以删除数据', 'error')
    } else {
      showNotification('删除失败：' + error.message, 'error')
    }
  }
}

建议3：角色标识更明显
====================

在导航栏显示角色：

<div className="user-info">
  <span>{session.user.email}</span>
  {userRole === 'admin' && (
    <span className="admin-badge">👑 管理员</span>
  )}
</div>

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📊 查看当前权限状态
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

在 Supabase SQL Editor 中运行：

-- 查看所有用户及其角色
SELECT 
  email,
  role,
  CASE 
    WHEN role = 'admin' THEN '👑 管理员'
    WHEN role = 'manager' THEN '👔 经理'
    ELSE '👤 普通用户'
  END as display_role,
  created_at
FROM profiles
ORDER BY created_at;

-- 查看所有表的策略
SELECT 
  tablename,
  policyname,
  cmd as operation,
  CASE 
    WHEN policyname LIKE '%管理员%' THEN '🔒 限制'
    ELSE '✅ 开放'
  END as access_type
FROM pg_policies
WHERE tablename IN ('profiles', 'packages', 'locations')
ORDER BY tablename, cmd;

-- 测试当前用户权限
SELECT 
  get_user_role() as my_role,
  is_admin() as am_i_admin,
  CASE 
    WHEN is_admin() THEN '✅ 可以删除数据'
    ELSE '❌ 不能删除数据'
  END as delete_permission;

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🎉 总结
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

新的权限方案：
=============
✅ 数据完全互通（所有用户看到相同的数据）
✅ 权限分级明确（普通用户基础操作，管理员全权限）
✅ 避免了 infinite recursion 问题
✅ 使用 SECURITY DEFINER 函数优化性能
✅ 代码清晰，易于维护

关键区别：
=========
普通用户：✅ 增 ✅ 改 ✅ 查 ❌ 删
管理员：  ✅ 增 ✅ 改 ✅ 查 ✅ 删

实施步骤：
=========
1. ✅ 运行 SQL 脚本
2. ✅ 设置管理员
3. ✅ 刷新前端
4. ✅ 测试权限

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📌 现在立即实施！按照上面的步骤操作！

🆘 遇到问题随时告诉我，我会帮你解决！

祝配置顺利！🎊

