╔═══════════════════════════════════════════════════════════════╗
║                                                               ║
║               📖 Git 常用命令速查表                           ║
║              （保存此文件，随时查看！）                       ║
║                                                               ║
╚═══════════════════════════════════════════════════════════════╝

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🎯 最常用的三条命令（90%的情况用这个）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

当你修改了代码，想上传到 GitHub：

1️⃣  git add .
   作用：把所有修改的文件标记为"准备上传"

2️⃣  git commit -m "说明你改了什么"
   作用：给这次修改写个说明
   例如：git commit -m "修复了上架功能的bug"
   例如：git commit -m "添加了数据同步功能"

3️⃣  git push
   作用：把代码上传到 GitHub
   
完整流程示例：
-----------
git add .
git commit -m "完成数据云端同步功能"
git push

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📝 每天工作的标准流程
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

【早上开始工作】
---------------
1. 打开项目文件夹
2. 运行：git pull
   → 拉取别人可能提交的新代码

【修改代码中...】
---------------
随时可以运行以下命令查看状态：

git status
→ 查看哪些文件被修改了（红色 = 未保存，绿色 = 已保存）

【下班前 / 完成一个功能后】
--------------------------
1. git add .
   → 保存所有修改

2. git commit -m "今天做了什么"
   → 写个说明

3. git push
   → 上传到 GitHub

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🔍 查看类命令（只看不改）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

git status
→ 查看当前状态（哪些文件被修改了）

git log
→ 查看历史提交记录（按 q 退出）

git log --oneline
→ 查看简化版历史记录（推荐！）

git diff
→ 查看具体修改了什么内容

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
💾 保存类命令
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

git add .
→ 保存所有修改的文件

git add 文件名
→ 只保存某个文件
例如：git add src/App.jsx

git commit -m "说明"
→ 提交保存，并写说明

git push
→ 上传到 GitHub

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
⬇️ 下载类命令
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

git pull
→ 从 GitHub 下载最新代码（合并到你的代码）

git fetch
→ 从 GitHub 下载最新代码（但不合并）

git clone 仓库地址
→ 第一次下载整个项目
例如：git clone https://github.com/你的用户名/你的项目.git

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🌿 分支管理（高级用法）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

git branch
→ 查看所有分支（当前分支会有 * 标记）

git branch 分支名
→ 创建新分支
例如：git branch feature-login

git checkout 分支名
→ 切换到某个分支
例如：git checkout main

git checkout -b 分支名
→ 创建并切换到新分支（常用！）
例如：git checkout -b feature-data-sync

git merge 分支名
→ 合并某个分支到当前分支

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🔙 撤销类命令（小心使用！）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

git restore 文件名
→ 撤销对某个文件的修改（恢复到上次提交的状态）
例如：git restore src/App.jsx

git restore .
→ 撤销所有修改

git reset --soft HEAD~1
→ 撤销上一次 commit（但保留修改）

git reset --hard HEAD~1
→ 撤销上一次 commit（并删除修改）⚠️ 危险！

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📋 实际场景示例
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

场景1：修改了代码，想上传
========================
1. git status          （查看修改了什么）
2. git add .           （保存所有修改）
3. git commit -m "修复了bug"
4. git push            （上传）

场景2：早上开始工作
==================
1. git pull            （下载最新代码）
2. 开始写代码...

场景3：想看看改了什么
====================
1. git status          （查看哪些文件被修改）
2. git diff            （查看具体改了什么内容）

场景4：误改了某个文件，想恢复
============================
1. git status          （确认是哪个文件）
2. git restore 文件名   （恢复该文件）

场景5：提交错了，想撤销
======================
1. git reset --soft HEAD~1   （撤销提交，但保留修改）
2. 重新修改...
3. git add .
4. git commit -m "正确的说明"
5. git push

场景6：别人也在改代码，我想更新
==============================
1. git add .
2. git commit -m "保存我的修改"
3. git pull            （拉取并合并别人的修改）
4. 如果有冲突，手动解决冲突
5. git add .
6. git commit -m "合并代码"
7. git push

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
⚠️ 常见错误和解决方法
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

错误1：git push 失败，提示 "rejected"
------------------------------------
原因：别人上传了新代码，你的代码不是最新的

解决：
1. git pull
2. 如果有冲突，解决冲突
3. git push

错误2：提示 "Please tell me who you are"
---------------------------------------
原因：没有配置 Git 用户信息

解决：
git config --global user.email "你的邮箱@example.com"
git config --global user.name "你的名字"

错误3：push 时要求输入用户名密码
-------------------------------
原因：GitHub 现在使用 Token 而不是密码

解决：
1. 去 GitHub 网站生成 Personal Access Token
2. 使用 Token 代替密码
3. 或者使用 SSH 方式（更方便）

错误4：提示 "fatal: not a git repository"
-----------------------------------------
原因：当前文件夹不是 Git 仓库

解决：
1. cd 到正确的项目文件夹
2. 或者运行 git init 初始化仓库

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
💡 写好 Commit 说明的技巧
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

好的示例：
---------
✅ git commit -m "添加了用户登录功能"
✅ git commit -m "修复了上架页面的显示bug"
✅ git commit -m "优化了数据库查询性能"
✅ git commit -m "更新了README文档"

不好的示例：
-----------
❌ git commit -m "修改"
❌ git commit -m "update"
❌ git commit -m "aaa"
❌ git commit -m "临时保存"

建议的格式：
-----------
动词 + 做了什么

常用动词：
- 添加：添加了XXX功能
- 修复：修复了XXX问题
- 优化：优化了XXX性能
- 更新：更新了XXX内容
- 删除：删除了XXX代码
- 重构：重构了XXX模块

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🎓 Git 工作流程图
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

工作区                暂存区              本地仓库            远程仓库
(Working)           (Staging)          (Repository)        (Remote)
   │                    │                    │                  │
   │  git add .         │                    │                  │
   ├──────────────────► │                    │                  │
   │                    │  git commit -m     │                  │
   │                    ├──────────────────► │                  │
   │                    │                    │  git push        │
   │                    │                    ├────────────────► │
   │                    │                    │                  │
   │                    │                    │  git pull        │
   │                    │                    │ ◄────────────────┤
   │                    │                    │                  │

说明：
- 工作区：你正在编辑的文件
- 暂存区：git add 后文件会到这里
- 本地仓库：git commit 后文件会到这里
- 远程仓库：git push 后文件会到 GitHub

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🔥 最常用的命令组合（记住这些就够了！）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

【日常提交代码】
git add .
git commit -m "说明"
git push

【早上拉取最新代码】
git pull

【查看状态】
git status

【查看历史】
git log --oneline

【撤销修改】
git restore 文件名

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🛠️ 配置 Git（第一次使用需要做）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

设置用户名和邮箱：
git config --global user.name "你的名字"
git config --global user.email "你的邮箱@example.com"

查看配置：
git config --list

设置默认分支名为 main：
git config --global init.defaultBranch main

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📱 GitHub Desktop（图形界面替代方案）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

如果你觉得命令行太复杂，可以使用 GitHub Desktop：

1. 下载：https://desktop.github.com/
2. 安装后登录你的 GitHub 账号
3. 打开你的项目
4. 所有操作都有图形界面：
   - 查看修改：自动显示
   - 提交代码：填写说明，点击按钮
   - 推送代码：点击 "Push origin"
   - 拉取代码：点击 "Pull origin"

推荐新手使用！操作更直观！

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
💪 进阶技巧
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1. 创建 .gitignore 文件
   作用：指定哪些文件不需要上传
   
   常见内容：
   node_modules/
   .env
   .env.local
   dist/
   .DS_Store

2. 使用别名（简化命令）
   git config --global alias.st status
   git config --global alias.co checkout
   git config --global alias.br branch
   git config --global alias.ci commit
   
   之后可以用：
   git st      代替  git status
   git co      代替  git checkout
   git br      代替  git branch
   git ci      代替  git commit

3. 快速提交
   git commit -am "说明"
   等同于：
   git add .
   git commit -m "说明"

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🎯 总结：记住这5条就够用！
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1. git status         → 看看改了什么
2. git add .          → 保存所有修改
3. git commit -m "说明" → 提交并写说明
4. git push           → 上传到 GitHub
5. git pull           → 下载最新代码

每天就用这几条命令，足够了！

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📖 保存这个文件，需要时随时查看！
🔖 建议打印出来贴在电脑旁边！
💡 遇到问题先看"常见错误和解决方法"那一节！

祝你使用愉快！🎉

